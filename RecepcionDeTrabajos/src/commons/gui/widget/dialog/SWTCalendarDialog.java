package commons.gui.widget.dialog;import java.util.Calendar;import java.util.Date;import org.eclipse.jface.dialogs.Dialog;import org.eclipse.jface.dialogs.IDialogConstants;import org.eclipse.swt.SWT;import org.eclipse.swt.events.KeyAdapter;import org.eclipse.swt.events.KeyEvent;import org.eclipse.swt.events.KeyListener;import org.eclipse.swt.events.SelectionAdapter;import org.eclipse.swt.events.SelectionEvent;import org.eclipse.swt.events.SelectionListener;import org.eclipse.swt.graphics.Point;import org.eclipse.swt.layout.GridData;import org.eclipse.swt.layout.GridLayout;import org.eclipse.swt.widgets.Button;import org.eclipse.swt.widgets.Composite;import org.eclipse.swt.widgets.Control;import org.eclipse.swt.widgets.Shell;import org.vafada.swtcalendar.SWTCalendar;import org.vafada.swtcalendar.SWTCalendarEvent;import org.vafada.swtcalendar.SWTCalendarListener;import recepciondetrabajos.Labels;public class SWTCalendarDialog extends Dialog {	public SWTCalendarDialog(Shell parentShell, Point location, Calendar previousSelection,			Calendar today) {		super(parentShell);		if (today == null) {			today = Calendar.getInstance();		}		if (previousSelection == null) {			previousSelection = today;		}		this.currentCalendar = previousSelection;		this.today = today;		setShellStyle(SWT.SYSTEM_MODAL);		this.location = location;	}	public boolean hasDayChanged(Calendar newCalendar) {		// FIXME bug N°1: si al desplegar el combo de meses se elige el que ya estaba seleccionado		// se cierra el dialogo		boolean result = false;		if (newCalendar.get(Calendar.MONTH) == currentCalendar.get(Calendar.MONTH)				&& newCalendar.get(Calendar.YEAR) == currentCalendar.get(Calendar.YEAR)) {			result = true;		}		currentCalendar = newCalendar;		return result;	}	public Calendar getSelectedCalendar() {		return currentCalendar;	}	public Date getSelectedDate() {		Date result = null;		if (currentCalendar != null) {			result = currentCalendar.getTime();		}		return result;	}	@Override	protected Point getInitialLocation(Point initialSize) {		return location;	}	@Override	protected Control createContents(Composite parent) {		SWTCalendar swtcal = new SWTCalendar(parent, SWT.NONE);		swtcal.setCalendar(this.currentCalendar);		swtcal.addSWTCalendarListener(getCalendarListener());		swtcal.addKeyListener(getCalendarKeyListener());		createButtonBar(parent);		return parent;	}	@Override	protected Control createButtonBar(Composite parent) {		Composite composite = new Composite(parent, SWT.NONE);		GridLayout layout = new GridLayout();		layout.numColumns = 0; // this is incremented by createButton		layout.makeColumnsEqualWidth = true;		layout.marginWidth = convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_MARGIN);		layout.marginHeight = convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_MARGIN);		layout.horizontalSpacing = convertHorizontalDLUsToPixels(IDialogConstants.HORIZONTAL_SPACING);		layout.verticalSpacing = convertVerticalDLUsToPixels(IDialogConstants.VERTICAL_SPACING);		composite.setLayout(layout);		GridData data = new GridData(SWT.CENTER, SWT.CENTER, true, true);		composite.setLayoutData(data);		composite.setFont(parent.getFont());		// Add the buttons to the button bar.		createButtonsForButtonBar(composite);		return composite;	}	@Override	protected void createButtonsForButtonBar(Composite parent) {		// create TODAY, NONE and CLOSE buttons		Button todayButton = createButton(parent, TODAY, Labels.getProperty("calendar.today"), true);		todayButton.addSelectionListener(getTodayListener());		Button noneButton = createButton(parent, NONE, Labels.getProperty("calendar.none"), false);		noneButton.addSelectionListener(getNoneListener());		Button closeButton = createButton(parent, CLOSE, Labels.getProperty("calendar.close"),				false);		closeButton.addSelectionListener(getCloseListener());	}	private SelectionListener getTodayListener() {		return new SelectionAdapter() {			@Override			public void widgetSelected(SelectionEvent event) {				updateCurrentSelection(SWTCalendarDialog.this.today);				okPressed();			}		};	}	private SelectionListener getNoneListener() {		return new SelectionAdapter() {			@Override			public void widgetSelected(SelectionEvent event) {				updateCurrentSelection(null);				okPressed();			}		};	}	private SelectionListener getCloseListener() {		return new SelectionAdapter() {			@Override			public void widgetSelected(SelectionEvent event) {				cancelPressed();			}		};	}	private SWTCalendarListener getCalendarListener() {		return new SWTCalendarListener() {			@SuppressWarnings("synthetic-access")			public void dateChanged(SWTCalendarEvent calendarEvent) {				if (SWTCalendarDialog.this.hasDayChanged(calendarEvent.getCalendar())) {					okPressed();				}			}		};	}	private KeyListener getCalendarKeyListener() {		return new KeyAdapter() {			@Override			public void keyPressed(KeyEvent keyEvent) {				if (keyEvent.keyCode == SWT.ESC) {					cancelPressed();				}			}		};	}	private void updateCurrentSelection(Calendar selection) {		this.currentCalendar = selection;	}	private static final int TODAY = 0;	private static final int NONE = 1;	private static final int CLOSE = 1;	private final Calendar today;	private Calendar currentCalendar;	private final Point location;}